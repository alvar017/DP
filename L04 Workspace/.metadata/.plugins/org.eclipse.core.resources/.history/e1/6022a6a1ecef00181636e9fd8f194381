
package services;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Customer;
import domain.FixUp;

@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class FixUpServiceTest extends AbstractTest {

	//Services under Test

	@Autowired
	private FixUpService	fixUpService;
	@Autowired
	private CategoryService	categoryService;
	@Autowired
	private WarrantyService	warrantyService;
	@Autowired
	private CustomerService	customerService;


	@Test
	public void testSaveFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
	}
	@Test
	public void updateFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
		saveFixUp.setAddress("Rodrigo de Triana 14");
		final FixUp saveFixUp2 = this.fixUpService.save(saveFixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp2));
	}

	@Test
	public void deleteFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
		this.fixUpService.delete(saveFixUp);
		Assert.isTrue(!this.fixUpService.findAll().contains(saveFixUp));
	}

}
