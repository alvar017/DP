
package services;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Administrator;
import domain.Category;

@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class CategoryServiceTest extends AbstractTest {

	//Services under Test

	@Autowired
	private CategoryService			categoryService;

	@Autowired
	private AdministratorService	administratorService;


	@Test
	public void testSaveCustomer() {
		final Administrator adminTest = this.administratorService.createFirstAdmin();
		adminTest.setName("Alvaro");
		adminTest.setSurname("alvaro");
		adminTest.getUserAccount().setUsername("dogran");
		adminTest.getUserAccount().setPassword("123456789");
		final Administrator adminTestSave = this.administratorService.save(adminTest);
		super.authenticate("dogran");
		final Category category = this.categoryService.create();
		category.setNameEN("Carpinteria");
		category.setNameES("carpinteria");
		final Category saveCategory = this.categoryService.save(category);
		Assert.isTrue(this.categoryService.findAll().contains(saveCategory));
	}

	@Test
	public void testCreate() {
		final Administrator adminTest = this.administratorService.createFirstAdmin();
		adminTest.setName("Alvaro");
		adminTest.setSurname("alvaro");
		adminTest.getUserAccount().setUsername("dogran");
		adminTest.getUserAccount().setPassword("123456789");
		final Administrator adminTestSave = this.administratorService.save(adminTest);
		super.authenticate("dogran");
		final Category category = this.categoryService.create();
		Assert.notNull(category);
	}

	@Test
	public void testFindOne() {
		Assert.isTrue(this.categoryService.findOne(451) != null);
	}

	@Test
	public void testDelete() {
		final Administrator adminTest = this.administratorService.createFirstAdmin();
		adminTest.setName("Alvaro");
		adminTest.setSurname("alvaro");
		adminTest.getUserAccount().setUsername("dogran");
		adminTest.getUserAccount().setPassword("123456789");
		final Administrator adminTestSave = this.administratorService.save(adminTest);
		super.authenticate("dogran");
		final Category category = this.categoryService.create();
		final Category saved = this.categoryService.save(category);
		Assert.isTrue(this.categoryService.findAll().contains(saved));
		this.categoryService.delete(saved);
		Assert.isTrue(!this.categoryService.findAll().contains(saved));
	}

	@Test
	public void testFindAll() {
		final Administrator adminTest = this.administratorService.createFirstAdmin();
		adminTest.setName("Alvaro");
		adminTest.setSurname("alvaro");
		adminTest.getUserAccount().setUsername("dogran");
		adminTest.getUserAccount().setPassword("123456789");
		final Administrator adminTestSave = this.administratorService.save(adminTest);
		super.authenticate("dogran");
		final Category category = this.categoryService.create();
		final Category saved = this.categoryService.save(category);
		Assert.isTrue(this.categoryService.findAll().contains(saved));
	}

	@Test
	public void testUpdate() {
		final Administrator adminTest = this.administratorService.createFirstAdmin();
		adminTest.setName("Alvaro");
		adminTest.setSurname("alvaro");
		adminTest.getUserAccount().setUsername("dogran");
		adminTest.getUserAccount().setPassword("123456789");
		final Administrator adminTestSave = this.administratorService.save(adminTest);
		super.authenticate("dogran");
		final Category category = this.categoryService.findOne(417);
		category.setNameEN("update");
		final Category udpateCategory = this.categoryService.update(category);

		final Category pruebaUpdate = this.categoryService.findOne(417);

		Assert.isTrue(pruebaUpdate.getNameEN() == "update");
	}
}
