
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.AdministratorRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;
import domain.Customer;
import domain.HandyWorker;
import domain.MailBox;

@Service
@Transactional
public class AdministratorService {

	//Managed Repository -------------------	
	@Autowired
	private AdministratorRepository	adminRepository;

	@Autowired
	private MailBoxService			mailBoxService;


	//Supporting services ------------------

	//Simple CRUD Methods ------------------		
	public Administrator create() {
		final Administrator a = this.adminRepository.findByUserAccountId(LoginService.getPrincipal().getId());
		Assert.notNull(a);
		final Administrator ad = new Administrator();
		final UserAccount cuenta = new UserAccount();
		final List<Authority> autoridades = new ArrayList<>();
		final Authority authority = new Authority();
		authority.setAuthority(Authority.ADMIN);
		autoridades.add(authority);
		cuenta.setAuthorities(autoridades);

		ad.setUserAccount(cuenta);

		final Collection<MailBox> boxesDefault = new ArrayList<>();

		final MailBox inBox = this.mailBoxService.create();
		inBox.setName("inBox");
		inBox.setIsDefault(true);
		final MailBox outBox = this.mailBoxService.create();
		outBox.setName("outBox");
		outBox.setIsDefault(true);
		final MailBox spamBox = this.mailBoxService.create();
		spamBox.setName("spamBox");
		spamBox.setIsDefault(true);
		final MailBox trashBox = this.mailBoxService.create();
		trashBox.setName("trashBox");
		trashBox.setIsDefault(true);

		final MailBox inBoxSave = this.mailBoxService.save(inBox);
		final MailBox outBoxSave = this.mailBoxService.save(outBox);
		final MailBox spamBoxSave = this.mailBoxService.save(spamBox);
		final MailBox trashBoxSave = this.mailBoxService.save(trashBox);

		boxesDefault.add(inBoxSave);
		boxesDefault.add(outBoxSave);
		boxesDefault.add(spamBoxSave);
		boxesDefault.add(trashBoxSave);

		administrator.setMailBoxes(boxesDefault);

		return ad;
	}

	public Administrator createFirstAdmin() {
		final Collection<Administrator> administrators = this.adminRepository.findAll();
		Assert.isTrue(administrators.size() == 0);
		final Administrator ad = new Administrator();
		final UserAccount cuenta = new UserAccount();
		final List<Authority> autoridades = new ArrayList<>();
		final Authority authority = new Authority();
		authority.setAuthority(Authority.ADMIN);
		autoridades.add(authority);
		cuenta.setAuthorities(autoridades);

		ad.setUserAccount(cuenta);

		return ad;
	}

	public Collection<Administrator> findAll() {
		return this.adminRepository.findAll();
	}

	public Administrator findOne(final int id) {
		final Administrator result = this.adminRepository.findOne(id);
		Assert.notNull(result);
		return result;
	}

	public Administrator save(final Administrator ad) {
		Assert.isTrue(!this.adminRepository.exists(ad.getId()));
		return this.adminRepository.save(ad);
	}
	public Administrator getAdministratorByUserAccountId(final int userAccountId) {
		Administrator res;
		res = this.adminRepository.findByUserAccountId(userAccountId);
		return res;
	}

	public Integer getMinComplaintPerFixUp() {
		final UserAccount userAccount = LoginService.getPrincipal();
		final int idAdmin = userAccount.getId();
		Assert.isTrue(this.getAdministratorByUserAccountId(idAdmin) != null);
		Integer res;
		res = this.adminRepository.getMinComplaintPerFixUp();
		return res;
	}

	public Integer getMaxComplaintPerFixUp() {
		Integer res;
		res = this.adminRepository.getMaxComplaintPerFixUp();
		return res;
	}

	public Double getAverageComplaintPerFixUp() {
		Double res;
		res = this.adminRepository.getAverageComplaintPerFixUp();
		return res;
	}

	public Double getStandardDeviationFixUp() {
		Double res;
		res = this.adminRepository.getStandardDeviationFixUp();
		return res;
	}

	public Integer getMaxNotesPerFixUp() {
		Integer res;
		res = this.adminRepository.getMaxNotesPerFixUp();
		return res;
	}

	public Integer getMinNotesPerFixUp() {
		Integer res;
		res = this.adminRepository.getMinNotesPerFixUp();
		return res;
	}

	public Double getAvgNotesPerFixUp() {
		Double res;
		res = this.adminRepository.getAvgNotesPerFixUp();
		return res;
	}

	public Double getStandardDeviationNotesPerFixUp() {
		Double res;
		res = this.adminRepository.getStandardDeviationNotesPerFixUp();
		return res;
	}

	public Double getRatioFixUpComplaint() {
		Double res;
		res = this.adminRepository.getRatioFixUpComplaint();
		return res;
	}

	public Collection<Customer> getTopThreeCustomers() {
		Collection<Customer> list = this.adminRepository.getTopThreeCustomers();
		final List<Customer> customers = new ArrayList<>(list);
		if (customers.size() <= 3)
			customers.subList(0, customers.size() - 1);
		else
			customers.subList(0, 2);
		list = customers;
		return list;
	}

	public Collection<HandyWorker> getTopThreeHandyWorker() {
		final Collection<HandyWorker> list = this.adminRepository.getTopThreeHandyWorker();
		if (list.size() < 3)
			return list;
		else {
			final List<HandyWorker> hw = new ArrayList<>(list);
			hw.subList(0, 2);
			return hw;
		}
	}

	public Administrator findByUserAccount(final int UserAccountId) {
		final Administrator result = this.adminRepository.findByUserAccountId(UserAccountId);
		return result;
	}
}
