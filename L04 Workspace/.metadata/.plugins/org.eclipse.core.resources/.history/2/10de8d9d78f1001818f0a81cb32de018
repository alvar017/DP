
package services;

import java.security.SecureRandom;
import java.util.Collection;

import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.FixUpRepository;
import security.LoginService;
import security.UserAccount;
import domain.Category;
import domain.Customer;
import domain.FixUp;
import domain.Warranty;

@Service
@Transactional
public class FixUpService {

	//Managed Repository -------------------	

	@Autowired
	private FixUpRepository	fixUpRepository;

	//Supporting services ------------------
	@Autowired
	private CustomerService	customerService;
	@Autowired
	CategoryService			categoryService;
	@Autowired
	WarrantyService			warrantyService;


	//Simple CRUD Methods ------------------

	public FixUp create() {

		final FixUp fixUp = new FixUp();
		fixUp.setTicker(this.randomTicker());
		final UserAccount login = LoginService.getPrincipal();
		final Customer customer = this.customerService.getCustomerByUserAccountId(login.getId());
		fixUp.setCustomer(customer);
		final Category category = this.categoryService.create();
		category.setNameEN("DefaultCategory");
		category.setNameES("CategoríaEjemplo");
		final Category saveCategory = this.categoryService.save(category);
		fixUp.setCategory(saveCategory);
		final Warranty warranty = this.warrantyService.create();
		warranty.setTitle("DefaultWarranty");
		final Warranty saveWaranty = this.warrantyService.save(warranty);
		fixUp.setWarranty(saveWaranty);
		return fixUp;

	}

	public String randomTicker() {
		final String characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
		final StringBuilder sb = new StringBuilder(); //consider using StringBuffer if needed
		for (int i = 0; i < 6; i++) {
			final int randomInt = new SecureRandom().nextInt(characterSet.length());
			sb.append(characterSet.substring(randomInt, randomInt + 1));
		}
		return LocalDate.now().toString().replaceAll("-", "") + sb.toString();
	}

	public Collection<FixUp> findAll() {
		return this.fixUpRepository.findAll();
	}

	public FixUp findOne(final int id) {
		return this.fixUpRepository.findOne(id);
	}
	public FixUp save(final FixUp fixUp) {
		return this.fixUpRepository.save(fixUp);
	}
	public void delete(final FixUp fixUp) {
		Assert.notNull(this.fixUpRepository.findOne(fixUp.getId()), "La fixUp no existe");
		this.fixUpRepository.delete(fixUp);
	}

	public void update(final FixUp fixUp) {
		final UserAccount login = LoginService.getPrincipal();
		Assert.isTrue(login != null);
		Assert.isTrue(this.customerService.getCustomerByUserAccountId(login.getId()) != null);
		final Customer customer = this.customerService.getCustomerByUserAccountId(login.getId());
		Assert.isTrue(fixUp.getCustomer().equals(customer));
		Assert.isTrue(findOne(fixUp.getId())!=null);
		this.fixUpRepository.save(fixUp);
	}

	//Other Methods

	public Collection<FixUp> getFixUpByCustomerId(final int customerId) {
		return this.fixUpRepository.findFixUpsByCustomer(customerId);
	}

	public Collection<FixUp> listing() {
		final UserAccount login = LoginService.getPrincipal();
		Assert.isTrue(login != null);
		Assert.isTrue(this.customerService.getCustomerByUserAccountId(login.getId()) != null);
		final Customer customer = this.customerService.getCustomerByUserAccountId(login.getId());
		return this.fixUpRepository.findFixUpsByCustomer(customer.getId());
	}
}
