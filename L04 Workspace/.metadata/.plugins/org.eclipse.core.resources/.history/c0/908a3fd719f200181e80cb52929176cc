
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.AdministratorRepository;
import repositories.RefereeRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import domain.Customer;
import domain.FixUp;
import domain.Referee;

@Service
@Transactional
public class RefereeService {

	//Managed Repository -------------------	

	@Autowired
	private RefereeRepository	refereeRepository;

	//Supporting services ------------------
	@Autowired
	private AdmnistratorService administratorService;
	
	//Simple CRUD Methods ------------------

	public Referee create() {

		final UserAccount userAccount = LoginService.getPrincipal();
		final int idAdmin = userAccount.getId();
		Assert.isTrue(administratorService.findOne(idAdmin)!=null);
		final Referee referee = new Referee();
		final UserAccount cuenta = new UserAccount();
		final List<Authority> autoridades = new ArrayList<>();
		final Authority authority = new Authority();
		authority.setAuthority(Authority.REFEREE);
		autoridades.add(authority);
		cuenta.setAuthorities(autoridades);

		referee.setUserAccount(cuenta);

		return referee;
	}

	public Collection<Customer> findAll() {
		return this.customerRepository.findAll();

	}

	public Customer findOne(final int id) {

		final Customer result = this.customerRepository.findOne(id);
		Assert.notNull(result);
		return result;
	}

	public Customer save(final Customer customer) {
		return this.customerRepository.save(customer);
	}

	//Other Methods

	public void deleteFixUp(final FixUp fixUp) {
		this.fixUpService.delete(fixUp);
	}
	public void updateFixUp(final FixUp fixUp) {

		this.fixUpService.update(fixUp);
	}
	public FixUp createFixUp() {
		return this.fixUpService.create();
	}

	public Customer getCustomerByUserAccountId(final int userAccountId) {
		Customer res;
		res = this.customerRepository.findByUserAccountId(userAccountId);
		return res;
	}

}
