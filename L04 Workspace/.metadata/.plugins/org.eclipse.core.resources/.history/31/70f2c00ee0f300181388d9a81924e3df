
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.CustomerRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;
import domain.Customer;
import domain.FixUp;
import domain.MailBox;

@Service
@Transactional
public class CustomerService {

	//Managed Repository -------------------	

	@Autowired
	private CustomerRepository	customerRepository;

	//Supporting services ------------------

	@Autowired
	private FixUpService		fixUpService;

	@Autowired
	private MailBoxService		mailBoxService;


	//Simple CRUD Methods ------------------

	public Customer create() {

		final Customer customer = new Customer();
		final UserAccount cuenta = new UserAccount();
		final List<Authority> autoridades = new ArrayList<>();
		final Authority authority = new Authority();
		authority.setAuthority(Authority.CUSTOMER);
		autoridades.add(authority);
		cuenta.setAuthorities(autoridades);

		customer.setUserAccount(cuenta);

		final Collection<MailBox> boxesDefault = new ArrayList<>();

		final MailBox inBox = this.mailBoxService.create();
		inBox.setName("inBox");
		inBox.setIsDefault(true);
		final MailBox outBox = this.mailBoxService.create();
		outBox.setName("outBox");
		outBox.setIsDefault(true);
		final MailBox spamBox = this.mailBoxService.create();
		spamBox.setName("spamBox");
		spamBox.setIsDefault(true);
		final MailBox trashBox = this.mailBoxService.create();
		trashBox.setName("trashBox");
		trashBox.setIsDefault(true);

		final MailBox inBoxSave = this.mailBoxService.save(inBox);
		final MailBox outBoxSave = this.mailBoxService.save(outBox);
		final MailBox spamBoxSave = this.mailBoxService.save(spamBox);
		final MailBox trashBoxSave = this.mailBoxService.save(trashBox);

		boxesDefault.add(inBoxSave);
		boxesDefault.add(outBoxSave);
		boxesDefault.add(spamBoxSave);
		boxesDefault.add(trashBoxSave);

		customer.setMailBoxes(boxesDefault);

		return customer;
	}

	public Collection<Customer> findAll() {
		return this.customerRepository.findAll();

	}

	public Customer findOne(final int id) {

		final Customer result = this.customerRepository.findOne(id);
		Assert.notNull(result);
		return result;
	}

	public Customer save(final Customer customer) {
		return this.customerRepository.save(customer);
	}

	//Other Methods

	public void deleteFixUp(final FixUp fixUp) {
		this.fixUpService.delete(fixUp);
	}
	public void updateFixUp(final FixUp fixUp) {

		this.fixUpService.update(fixUp);
	}
	public FixUp createFixUp() {
		return this.fixUpService.create();
	}

	public Customer getCustomerByUserAccountId(final int userAccountId) {
		Customer res;
		res = this.customerRepository.findByUserAccountId(userAccountId);
		return res;
	}
	
	//1259
		public Collection<Customer> betterCustomer() {
			final Administrator a = this.administratorService.findByUserAccount(LoginService.getPrincipal().getId());
			Assert.notNull(a);
			final Collection<Customer> result = this.customerRepository.betterCustomer();
			return result;
		}
}
