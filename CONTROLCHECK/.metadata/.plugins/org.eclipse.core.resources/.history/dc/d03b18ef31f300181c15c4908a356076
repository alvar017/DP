
package services;

import java.util.ArrayList;
import java.util.Collection;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Customer;
import domain.Finder;
import domain.FixUp;
import domain.Warranty;

@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
public class FixUpServiceTest extends AbstractTest {

	//Services under Test

	@Autowired
	private FixUpService	fixUpService;
	@Autowired
	private CustomerService	customerService;
	@Autowired
	private WarrantyService	warrantyService;
	@Autowired
	private FinderService	finderService;


	@Test
	public void testCreateFixUp() {
		final Customer customer = this.customerService.create();
		Assert.isTrue(customer != null);
	}
	@Test
	public void testSaveFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
	}
	@Test
	public void testUpdateFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final Warranty warranty = this.warrantyService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
		saveFixUp.setAddress("Rodrigo de Triana 14");
		warranty.setIsFinal(true);
		final Warranty saveWarranty = this.warrantyService.save(warranty);
		saveFixUp.setWarranty(saveWarranty);
		final FixUp saveFixUp2 = this.fixUpService.update(saveFixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp2));
	}

	@Test
	public void testDeleteFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp = this.fixUpService.create();
		final FixUp saveFixUp = this.fixUpService.save(fixUp);
		Assert.isTrue(this.fixUpService.findAll().contains(saveFixUp));
		this.fixUpService.delete(saveFixUp);
		Assert.isTrue(!this.fixUpService.findAll().contains(saveFixUp));
	}

	@Test
	public void testListingFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp1 = this.fixUpService.create();
		final FixUp saveFixUp1 = this.fixUpService.save(fixUp1);
		final FixUp fixUp2 = this.fixUpService.create();
		final FixUp saveFixUp2 = this.fixUpService.save(fixUp2);
		final FixUp fixUp3 = this.fixUpService.create();
		final FixUp saveFixUp3 = this.fixUpService.save(fixUp3);
		final FixUp fixUp4 = this.fixUpService.create();
		final FixUp saveFixUp4 = this.fixUpService.save(fixUp4);
		final int numFixUpAfter = this.fixUpService.listing().size();
		Assert.isTrue(numFixUpAfter == 4);
	}

	public void testShowFixUp() {
		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp1 = this.fixUpService.create();
		final FixUp saveFixUp1 = this.fixUpService.save(fixUp1);
		Assert.isTrue(this.fixUpService.showing(saveFixUp1.getId()).equals(saveFixUp1));
	}

	//73.2 (CARMEN) --> Display the fix-up tasks in his or her finder.
	@Test
	public void allFixUpsByFInder() {

		final Customer customer = this.customerService.create();
		customer.setName("Alvaro");
		customer.setSurname("alvaro");
		customer.getUserAccount().setUsername("dogran");
		customer.getUserAccount().setPassword("123456789");
		final Customer saveCustomer = this.customerService.save(customer);
		super.authenticate("dogran");
		final FixUp fixUp1 = this.fixUpService.create();
		final FixUp saveFixUp1 = this.fixUpService.save(fixUp1);
		final FixUp fixUp2 = this.fixUpService.create();
		final FixUp saveFixUp2 = this.fixUpService.save(fixUp2);
		final FixUp fixUp3 = this.fixUpService.create();
		final FixUp saveFixUp3 = this.fixUpService.save(fixUp3);
		final FixUp fixUp4 = this.fixUpService.create();
		final FixUp saveFixUp4 = this.fixUpService.save(fixUp4);

		final Collection<FixUp> fixUps = new ArrayList<>();
		fixUps.add(saveFixUp1);
		fixUps.add(saveFixUp2);
		fixUps.add(saveFixUp3);
		fixUps.add(saveFixUp4);

		final Finder finder = this.finderService.create();
		finder.setFixUps(fixUps);
		final Finder finderSave = this.finderService.save(finder);

		final Collection<FixUp> resF = this.fixUpService.showAllFixUpbyFinder(finderSave.getId());
		Assert.isTrue(resF.size() == 0);
	}
	//(CARMEN)
}
