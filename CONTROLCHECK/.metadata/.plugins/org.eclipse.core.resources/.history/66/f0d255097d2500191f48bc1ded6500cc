/*
 * CustomerController.java
 * 
 * Copyright (C) 2018 Universidad de Sevilla
 * 
 * The use of this project is hereby constrained to the conditions of the
 * TDG Licence, a copy of which you may download from
 * http://www.tdg-seville.info/License.html
 */

package controllers;

import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

import javax.validation.Valid;

import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import security.LoginService;
import services.CustomerService;
import services.FixUpService;
import services.QuoletService;
import services.WelcomeService;
import domain.Customer;
import domain.FixUp;
import domain.Quolet;

@Controller
@RequestMapping("/quolet/customer")
public class QuoletCustomerController extends AbstractController {

	@Autowired
	private QuoletService	quoletService;

	@Autowired
	private CustomerService	customerService;

	@Autowired
	private FixUpService	fixUpService;

	@Autowired
	private WelcomeService	welcomeService;


	// Constructors -----------------------------------------------------------

	public QuoletCustomerController() {
		super();
	}

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list() {
		ModelAndView result;
		final Integer userAccountId = LoginService.getPrincipal().getId();
		if (userAccountId != null && this.customerService.getCustomerByUserAccountId(userAccountId) != null) {
			final Collection<Quolet> quolets = this.quoletService.listQuoletsByCustomer();
			result = new ModelAndView("quolet/customer/list");
			result.addObject("quolets", quolets);
			final String system = this.welcomeService.getSystem();
			result.addObject("system", system);
			final String logo = this.welcomeService.getLogo();
			result.addObject("logo", logo);
			result.addObject("hasAnyEntityRequired", hasAnyEntityRequired());
			result.addObject("requestURI", "quolet/customer/list.do");
		} else
			result = new ModelAndView("welcome/index");
		return result;
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;

		if (!this.hasAnyEntityRequired())
			result = new ModelAndView("redirect:list.do");
		else {
			Quolet quolet;
			quolet = this.quoletService.create();
			quolet.setMoment(LocalDateTime.now().toDate());
			result = this.createEditModelAndView(quolet);
		}
		return result;
	}

	private ModelAndView createEditModelAndView(final Quolet quolet) {
		ModelAndView result;

		result = new ModelAndView("quolet/customer/edit");
		final Integer userAccountId = LoginService.getPrincipal().getId();
		if (userAccountId != null && this.customerService.getCustomerByUserAccountId(userAccountId) != null) {
			final Collection<FixUp> fixUps = this.fixUpService.getFixUpByCustomerId(this.customerService.getCustomerByUserAccountId(userAccountId).getId());
			result.addObject("fixUps", fixUps);
			result.addObject("quolet", quolet);
			final String system = this.welcomeService.getSystem();
			result.addObject("system", system);
			final String logo = this.welcomeService.getLogo();
			result.addObject("logo", logo);
		} else
			result = new ModelAndView("welcome/index");

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam(value = "id", defaultValue = "-1") final int quoletId) {
		ModelAndView result;

		Quolet quolet;

		quolet = this.quoletService.findOne(quoletId);
		if (this.quoletService.findOne(quoletId) == null || LoginService.getPrincipal().getId() != quolet.getCustomer().getUserAccount().getId() || quolet.getIsFinal() == true)
			result = new ModelAndView("redirect:list.do");
		else {
			Assert.notNull(quolet);
			result = this.createEditModelAndView(quolet);
		}
		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid final Quolet quolet, final BindingResult binding) {
		ModelAndView result;
		// Esto es un método para modificar el quolet, por si hiciese falta
		//		if (AQUI SE METE LA RESTRICCIÓN QUE QUIERAS CONTROLAR PARA MODIFICAR EL BINDING) {
		//			final ObjectError error = new ObjectError("Aquí metes el atributo que falla, por ejemplo: isFinal", "Aquí se pone la descripción del error");
		//			binding.addError(error);
		//			binding.rejectValue("de nuevo se pone el atributo p.e. isFinal", "error.ATRIBUTOQUEFALLA p.e. error.isFinal");
		// que no se os olvide meter el error en el messageProperty
		//		}
		if (binding.hasErrors()) {
			System.out.println("El error pasa por aquí alvaro (IF de save())");
			System.out.println(binding);
			result = this.createEditModelAndView(quolet);
		} else
			try {
				System.out.println("El error pasa por aquí alvaro (TRY de save())");
				System.out.println(binding);
				this.quoletService.save(quolet);
				result = new ModelAndView("redirect:list.do");
			} catch (final Throwable oops) {
				System.out.println("El error: ");
				System.out.println(oops);
				System.out.println(binding);
				// Esto son las capturas de los errores que se producen con los assert en servicios
				//				if (oops.getMessage().equals("fixUp.wrongDate"))
				//					result = this.createEditModelAndView(fixUp, "fixUp.wrongDate");
				//				else if (oops.getMessage().equals("fixUp.wrongMomentDate"))
				//					result = this.createEditModelAndView(fixUp, "fixUp.wrongMomentDate");
				//				else
				//					result = this.createEditModelAndView(fixUp, "fixUp.commit.error");
				result = this.createEditModelAndView(quolet, "quolet.commit.error");
			}
		return result;
	}

	private ModelAndView createEditModelAndView(final Quolet quolet, final String messageCode) {
		ModelAndView result;

		result = new ModelAndView("quolet/customer/edit");
		final Integer userAccountId = LoginService.getPrincipal().getId();
		if (userAccountId != null && this.customerService.getCustomerByUserAccountId(userAccountId) != null) {
			final Collection<FixUp> fixUps = this.fixUpService.getFixUpByCustomerId(this.customerService.getCustomerByUserAccountId(userAccountId).getId());
			result.addObject("fixUps", fixUps);
			result.addObject("quolet", quolet);
			final String system = this.welcomeService.getSystem();
			result.addObject("system", system);
			final String logo = this.welcomeService.getLogo();
			result.addObject("logo", logo);
			result.addObject("message", messageCode);
		} else
			result = new ModelAndView("welcome/index");
		return result;
	}

	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public ModelAndView delete(@RequestParam(value = "id", defaultValue = "-1") final int quoletId) {
		ModelAndView result;
		final Quolet quolet = this.quoletService.findOne(quoletId);

		if (this.quoletService.findOne(quoletId) == null || LoginService.getPrincipal().getId() != quolet.getCustomer().getUserAccount().getId() || quolet.getIsFinal() == true)
			result = new ModelAndView("redirect:list.do");
		else {
			System.out.println("Customer del quolet: " + quolet.getCustomer());
			System.out.println("Customer logger: " + this.customerService.getCustomerByUserAccountId(LoginService.getPrincipal().getId()));
			System.out.println("Quolet encontrado: " + quolet);
			try {
				this.quoletService.delete(quolet);
				result = new ModelAndView("redirect:list.do");
			} catch (final Exception e) {
				System.out.println(e);
				System.out.println(e.getLocalizedMessage());
				result = this.createEditModelAndView(quolet, "quolet.commit.error");
			}
		}
		return result;
	}

	@SuppressWarnings("deprecation")
	private Date restarMes1(final Date fecha) {
		final Date res = LocalDateTime.now().toDate();
		if (res.getMonth() == 0) {
			res.setYear(res.getYear() - 1);
			res.setMonth(11);
		} else
			res.setMonth(res.getMonth() - 1);
		return res;
	}

	@SuppressWarnings("deprecation")
	private Date restarMes2(final Date fecha) {
		final Date res = LocalDateTime.now().toDate();
		if (res.getMonth() == 1) {
			res.setYear(res.getYear() - 1);
			res.setMonth(10);
		} else
			res.setMonth(res.getMonth() - 2);
		return res;
	}

	@SuppressWarnings("deprecation")
	private Date restarMes3(final Date fecha) {
		final Date res = LocalDateTime.now().toDate();
		if (res.getMonth() == 2) {
			res.setYear(res.getYear() - 1);
			res.setMonth(9);
		} else
			res.setMonth(res.getMonth() - 3);
		return res;
	}

	private String chooseColor(final Quolet quolet) {
		String res;
		final Date fechaActual = LocalDate.now().toDate();
		System.out.println("Fecha actual: " + fechaActual);
		final Date cal1month = this.restarMes1(quolet.getMoment());
		final Date cal2month = this.restarMes2(quolet.getMoment());
		final Date cal3month = this.restarMes3(quolet.getMoment());

		System.out.println("Primera prueba: " + cal1month.before(fechaActual));
		System.out.println("Segunda prueba: " + !cal2month.before(fechaActual));
		if (quolet.getMoment().after(cal1month))
			// VERDE
			res = "#00cc00";
		else if (quolet.getMoment().after(cal2month) && quolet.getMoment().before(cal1month))
			// ROJA
			res = "#ff0000";
		else {
			// AZUL PATRONA
			System.out.println("Las fechas son: 1 mes -> " + cal1month + " y 2 meses: " + cal2month + " y 3 meses: " + cal3month);
			res = "#0033cc";
		}
		return res;
	}
	@RequestMapping(value = "/show", method = RequestMethod.GET)
	//Cambiar quolet por el nombre que den en el enunciado
	public ModelAndView show(@RequestParam(value = "quoletId", defaultValue = "-1") final int quoletId) {
		ModelAndView result;
		final Quolet quolet = this.quoletService.findOne(quoletId);

		if (this.quoletService.findOne(quoletId) == null || LoginService.getPrincipal().getId() != quolet.getCustomer().getUserAccount().getId())
			result = new ModelAndView("redirect:list.do");
		else {
			Assert.notNull(quolet, "quolet.nul");

			final String color = this.chooseColor(quolet);
			final Date dateES = quolet.getMoment();
			final Date dateEN = quolet.getMoment();

			final SimpleDateFormat formatEN = new SimpleDateFormat("yy/mm/dd hh:mm");
			final SimpleDateFormat formatES = new SimpleDateFormat("dd-mm-yy hh:mm");

			final String dateESparse = formatES.format(dateES);
			final String dateENparse = formatEN.format(dateEN);

			result = new ModelAndView("quolet/customer/show");
			final String language = LocaleContextHolder.getLocale().getDisplayLanguage();
			result.addObject("language", language);
			result.addObject("quolet", quolet);
			final String system = this.welcomeService.getSystem();
			result.addObject("system", system);
			final String logo = this.welcomeService.getLogo();
			result.addObject("color", color);
			result.addObject("logo", logo);
			result.addObject("dateENparse", dateENparse);
			result.addObject("dateESparse", dateESparse);
			result.addObject("requestURI", "quolet/customer/show.do");
		}
		return result;
	}

	private Boolean hasAnyEntityRequired() { // Comprobamos que el usuario tiene alguna entidad sobre la que se pueda crear una quolet
		Boolean res = false;
		final int userAccountLogin = LoginService.getPrincipal().getId();
		// Suponemos que quien crea la entidad es un customer
		final Customer customerLogin = this.customerService.getCustomerByUserAccountId(userAccountLogin);
		Assert.notNull(customerLogin, "customerLogin.null");
		if (customerLogin.getFixUps().size() > 0)
			res = true;
		return res;
	}
}
