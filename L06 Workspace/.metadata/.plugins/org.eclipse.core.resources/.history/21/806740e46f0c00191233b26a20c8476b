
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import repositories.EndorsementRepository;
import security.LoginService;
import domain.Customer;
import domain.Endorsement;
import domain.HandyWorker;

@Service
@Transactional
public class EndorsementService {

	@Autowired
	private EndorsementRepository	endorsementRepository;

	@Autowired
	private ActorService			actorService;

	@Autowired
	private HandyWorkerService		handyWorkerService;

	@Autowired
	private CustomerService			customerService;


	public Endorsement create() {
		final Endorsement endorsement = new Endorsement();
		return endorsement;
	}

	public Endorsement save(final Endorsement endorsement) {
		Assert.isTrue(endorsement != null, "endorsement.null");
		final Integer userAccountId = LoginService.getPrincipal().getId();
		Assert.notNull(userAccountId, "endorsement.userAccountId.null");
		final Customer customer = this.customerService.getCustomerByUserAccountId(userAccountId);
		final HandyWorker handyWorker = this.handyWorkerService.getHandyWorkerByUserAccountId(userAccountId);
		if (customer != null) {
			Assert.isTrue(endorsement.getEndorsableSender().getId() == customer.getId());
			System.out.println("CustomerID: " + customer.getId() + " EndorsableID: " + endorsement.getEndorsableSender().getId());
		} else {
			Assert.isTrue(endorsement.getEndorsableSender().getId() == handyWorker.getId());
			System.out.println("CustomerID: " + customer.getId() + " EndorsableID: " + endorsement.getEndorsableSender().getId());
		}
		final Endorsement endorsementSaved = this.endorsementRepository.save(endorsement);
		return endorsementSaved;
	}
	public Collection<endorsement> findAll() {
		return this.endorsementRepository.findAll();
	}

	public endorsement findOne(final Integer id) {
		return this.endorsementRepository.findOne(id);
	}

	public void delete(final endorsement endorsement) {
		final Integer idUserAccount = LoginService.getPrincipal().getId();
		Assert.notNull(idUserAccount);
		if (this.handyWorkerService.findByUserAccountId(idUserAccount) != null) {
			final HandyWorker handyWorker = this.handyWorkerService.findByUserAccountId(idUserAccount);
			Assert.isTrue(handyWorker != null);
			Assert.isTrue(handyWorker.getendorsements().contains(endorsement));
			handyWorker.getendorsements().remove(endorsement);
			this.handyWorkerService.save(handyWorker);
		} else if (this.customerService.getCustomerByUserAccountId(idUserAccount) != null) {
			final Customer customer = this.customerService.getCustomerByUserAccountId(idUserAccount);
			Assert.isTrue(customer != null);
			Assert.isTrue(customer.getendorsements().contains(endorsement));
			customer.getendorsements().remove(endorsement);
			this.customerService.save(customer);
		}
		this.endorsementRepository.delete(endorsement);
	}

}
